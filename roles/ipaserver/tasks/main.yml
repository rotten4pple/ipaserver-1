---
- name: Ensure software is installed (yum), this might take several minutes
  yum: name={{ item }} state=present
  with_items: '{{ipaserver_packages}}'
  
- name: get the list of templates to transfer
  tags:
    - copyScripts
  become: no
  local_action: "shell ls roles/ipaserver/templates/* | sed 's~.*/~~g'"
  register:     template_files

- name:         iterate and send templates
  tags:
    - copyScripts
  template:     src=templates/{{ item }} dest=/root/{{ item }}
  with_items:
  - "{{ template_files.stdout.splitlines() }}"
  
- name:  add 4.3 freeipa repo, todo try this when it's in production mode 
  tags:
    - bootstrap
  template: src=freeipa-4.3.repo dest=/etc/yum.repos.d
  when: enable_4.3
  
- name: check if force uninstall is true, uninstall ipa-server if true
  tags:
    - uninstall
  command: ipa-server-install --uninstall -U
  ignore_errors: yes
  when: force_uninstall
  
- name: Run the ipaserver installer, this will take several minutes, go take a coffee break..
  tags:
    - installIpa
  action: command
    {{ ipaserver_base_command }}
    --realm {{ ipaserver_realm }}
    --domain {{ ipaserver_domain }}
    -a {{ ipaserver_admin_password }}
    -p {{ ipaserver_dir_admin_password }}
    --hostname={{ ansible_hostname }}.{{ipaserver_domain}}
    --ip-address={{ ansible_eth0.ipv4.address }}
    {{ '--idstart=%s' % ipaserver_idstart if ipaserver_idstart | default(False) else '' }}
    {{ '--idmax=%s' % ipaserver_idmax if ipaserver_idmax | default(False) else '' }}
    {{ '--forwarder=%s' % ipaserver_dns_forwarder
       if ipaserver_dns_forwarder | default(False) else '--no-forwarders' }}
    {{ '--mkhomedir' if ipaserver_mkhomedir | default(True) else '' }}
    {{ '--setup-dns' if ipaserver_setup_dns | default(True) else '' }}
    {{ '--ssh-trust-dns' if ipaserver_ssh_trust_dns | default(True) else '' }}
    {{ '' if ipaserver_hbac_allow | default(True) else '--no_hbac_allow' }}
    {{ '' if ipaserver_setup_ntp | default(True) else '--no-ntp' }}
    {{ '' if ipaserver_configure_ssh | default(True) else '--no-ssh' }}
    {{ '' if ipaserver_configure_sshd | default(True) else '--no-sshd' }}
    {{ '' if ipaserver_ui_redirect | default(True) else '--no-ui-redirect' }}
    creates=/etc/ipa/default.conf


- name: Install KRA on FreeIPA master (2-3 minutes)
  tags:
    - ipaserver-master
    - ipa-install
    - ipa-kra-install
  command: >
    ipa-kra-install -U
    -p {{ ipaserver_dir_admin_password }}
  args:
    creates: /etc/pki/pki-tomcat/kra/CS.cfg
# XXX workaround for race condition
# KRA restarts LDAP, which disconnects bind-ldap plugin. The reconnect
# interval is 60 seconds. A restart make sure named is working properly.
- name: Make sure named-pkcs11 DNS is restarted
  tags:
    - ipaserver-master
    - ipa-install
    - ipa-kra-install
  service: name=named-pkcs11 state=restarted
  changed_when: false


- name: Create the rndc configuration file and key
  tags:
    - migrate
  command: "{{item}}"
  with_items:
   - /usr/sbin/rndc-confgen -a
   - /sbin/restorecon /etc/rndc.key
   - chown root:named /etc/rndc.key
   - chmod 0640 /etc/rndc.key



- name: Add master ipa DNS to /etc/resolv.conf
  tags:
    - ipaserver-replica
    - ipa-install
    - dns
  lineinfile:
    dest=/etc/resolv.conf
    regexp="^nameserver"
    line="127.0.0.1"
    insertbefore=yes
    state=present
    owner=root
    group=root
    mode=0644
  when: ipaserver_setup_dns



        
- name: create Migrate.sh to migrate users/groups from another freeIPA to this one
  tags:
    - migrate
  lineinfile:
    dest={{migrateCmdFile}}
    regexp="{{item}}"
    line="{{item}}"
    owner=root
    group=root
    mode=0755
    create=True
  with_items:
    - echo {{ ipaserver_admin_password }} | kinit admin
    - ipa config-mod --enable-migration=TRUE
    - echo {{migrateSrc_ipa_dir_admin_password}} | {{ migrateCmd }}{{migrateSrc_host}}
  when: migrate_enable
    

- name: run migrate.sh, this might take a while
  tags:
    - migrate
  command: "{{item}}"
  with_items:
   - sh {{migrateCmdFile}}
  when: migrate_enable

- name: enable password auth
  tags:
    - sshdSetup
  lineinfile:
    dest=/etc/ssh/sshd_config
    regexp="^PasswordAuthentication"
    line="PasswordAuthentication yes"
    state=present
    owner=root
    group=root
    mode=0644
- name: update auth config and go ahead reboot to apply all auth update
  tags:
    - sshdSetup
  command: "{{item}}"
  with_items:
   - authconfig --enablemkhomedir --update

- name: restart machine
  tags:
    - sshdSetup
  shell: sleep 2 && shutdown -r now "Ansible updates triggered"
  async: 1
  poll: 0
  ignore_errors: true